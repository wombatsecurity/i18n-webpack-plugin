/********************************************************************************
 * (C) 2016 Wombat Security Technologies, Inc.
 * Description:
 * Author:
 * Date:        3/18/2016
 *******************************************************************************/
var path = require( 'path' );
var assign = require( 'object-assign' );
var loaderUtils = require( 'loader-utils' );
var _ = require( 'lodash' );

/**
 * Define a function to be used by Webpack for loading the i18n.json files
 * @param source
 * @returns {string}
 */
function loader( source ) {
	// parse query
	var query = loaderUtils.parseQuery(this.query);

	// get the function generator
	var fnGenerator = this.options[query.generator || 'i18nFnGenerator'] || defaultGetTextGenerator;
	
	// get the key function
	var fnKey = this.options[query.key || 'i18nKeyFunction'] || defaultKeyFn;
	
	// get the rest of the options
	var options = assign(
		{
			root: process.cwd(),
			shared_text_key: null
		},
		loaderUtils.parseQuery( this.query )
	);	
	

	// cacheable
	if ( this.cacheable ) {
		this.cacheable();
	}

	// add dependency
	this.addDependency( this.resourcePath );

	// Set up default options & override them with other options
	

	// figure out the relative path & root from the root to the resource
	var relative_path = path.relative( options.root, this.resourcePath ).replace( new RegExp( '\\' + path.sep, 'g' ), '/' ),
		key = fnKey( relative_path );

	// Parse the json
	var json = JSON.parse( source );

	// Save the content on the current context
	if ( this[__dirname] ) {
		this[__dirname]( {
			key: key,
			json: json
		} );
	}

	// replace the require with the function generated by fnGenerator
	var replace = 'var fn = ' + fnGenerator( relative_path, key ) + '; '
		+ 'fn.locales = ["' + _.reduce( json, function ( memo, text, locale ) {
			if ( locale !== options.shared_text_key ) {
				memo.push( locale );
			}
			return memo;
		}, [] ).join( '","' ) + '"]; '
		+ ' module.exports = fn;';

	// return the replacement string
	return replace;
};

module.exports.raw = true;

/**
 * The default way to retrieve localized text.
 * @param path
 * @param key
 * @returns {string}
 */
function defaultGetTextGenerator( path, key ) {
	return "function ( ) { return window.getText(" + JSON.stringify( key ) + "); }";
}

/**
 * The default method for turning path/dir into a key
 * @param path
 * @returns {*}
 */
function defaultKeyFn( path ) {
	return path;
}

// Export actual loader method
module.exports = loader;
