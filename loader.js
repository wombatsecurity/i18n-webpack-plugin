/********************************************************************************
 * (C) 2016 Wombat Security Technologies, Inc.
 * Description:
 * Author:
 * Date:        3/18/2016
 *******************************************************************************/
var path = require( 'path' );
var assign = require( 'object-assign' );
var loaderUtils = require( 'loader-utils' );
var _ = require( 'lodash' );
var fs = require( 'fs' );

var NS = fs.realpathSync( __dirname );

/**
 * Define a function to be used by Webpack for loading the i18n.json files
 * @param source
 * @returns {string}
 */
function loader( source ) {
	// cacheable
	if ( this.cacheable ) { this.cacheable(); }

	// get options
	const options = assign(
		{
			root: process.cwd(),
			shared_text_key: null,
			getTextGen: defaultGetTextGenerator,
			keyFn: defaultKeyFn
		},
		loaderUtils.getOptions( this )
	);
	
	// add dependency
	this.addDependency( this.resourcePath );

	// figure out the relative path & root from the root to the resource
	var relative_path = path.relative( options.root, this.resourcePath ).replace( new RegExp( '\\' + path.sep, 'g' ), '/' ),
		key = options.keyFn( relative_path );

	if ( !this[NS] ) {
		throw new Error( '"i18n-webpack-plugin" loader requires the corresponding plugin' );
	} else {
		// Parse the json
		var json = JSON.parse( source );

		// Save key + json
		this[NS].setPluginContent( {
			key: key,
			json: json
		} );

		// replace the require with the function generated by fnGenerator
		var replace = 'var fn = ' + options.getTextGen( relative_path, key ) + '; '
			+ 'fn.locales = ["' + _.reduce( json, function ( memo, text, locale ) {
				if ( locale !== options.shared_text_key ) {
					memo.push( locale );
				}
				return memo;
			}, [] ).join( '","' ) + '"]; '
			+ ' module.exports = fn;';

		// return the replacement string
		return replace;
	}
};

module.exports.raw = true;

/**
 * The default way to retrieve localized text.
 * @param path
 * @param key
 * @returns {string}
 */
function defaultGetTextGenerator( path, key ) {
	return "function ( ) { return window.getText(" + JSON.stringify( key ) + "); }";
}

/**
 * The default method for turning path/dir into a key
 * @param path
 * @returns {*}
 */
function defaultKeyFn( path ) {
	return path;
}

// Export actual loader method
module.exports = loader;
