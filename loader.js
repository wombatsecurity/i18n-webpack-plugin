/********************************************************************************
 * (C) 2016 Wombat Security Technologies, Inc.
 * Description:
 * Author:
 * Date:        3/18/2016
 *******************************************************************************/
var path = require( 'path' );
var assign = require( 'object-assign' );
var loaderUtils = require( 'loader-utils' );

/**
 * Define a function to be used by Webpack for loading the i18n.json files
 * @param source
 * @returns {string}
 */
function loader( source ) {
	// cacheable
	if ( this.cacheable ) {
		this.cacheable();
	}

	// add dependency
	this.addDependency( this.resourcePath );

	// Set up default options & override them with other options
	var options = assign(
		{
			root: process.cwd(),
			verbose: false,
			fnGenerator: defaultGetTextGenerator
		},
		this.options['i18n-webpack-plugin-loader'],
		loaderUtils.parseQuery( this.query )
	);

	// figure out the relative path & root from the root to the resource
	var relative_path = path.relative( options.root, this.resourcePath ).replace( new RegExp( '\\' + path.sep, 'g'), '/' ),
		relative_dir = path.parse( relative_path ).dir;

	// Save the content on the current context
	if ( this[__dirname] ) {
		this[__dirname]( {
			key: relative_path,
			json: JSON.parse( source )
		} );
	}

	// replace the require with the function generated by fnGenerator
	return "module.exports = " + options.fnGenerator( relative_path, relative_dir );
};

module.exports.raw = true;

/**
 * The default way to retrieve localized text. 
 * @param path
 * @returns {string}
 */
function defaultGetTextGenerator( path, dir ) {
	return "function ( ) { return window.getText(" + JSON.stringify(path) + "); }";
}

// Export actual loader method
module.exports = loader;
