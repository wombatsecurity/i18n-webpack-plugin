// @ts-check
'use-strict';

// node builtins
const { realpathSync }  = require( 'fs' );
const { relative, sep } = require( 'path' );

// dependencies
const { reduce }     = require( 'lodash' );
const { getOptions } = require( 'loader-utils' );

// other constants
const NS = realpathSync( __dirname );

/**
 * Define a function to be used by Webpack for loading the i18n.json files
 * @param {string} source
 * @returns {string}
 */
function loader( source ) {

	// cacheable since i18n files don't have side effects
	if ( this.cacheable ) this.cacheable();

	// get options with loader-utils
	const options = Object.assign(
		{
			root: process.cwd(),
			shared_text_key: null,
			getTextGen: defaultGetTextGenerator,
			keyFn: defaultKeyFn
		},
		getOptions( this )
	);

	// add file as dependency (so i18n files are watchable)
	this.addDependency( this.resourcePath );

	// figure out the relative path & root from the root to the resource
	const relative_path = relative( options.root, this.resourcePath ).replace( new RegExp( '\\' + sep, 'g' ), '/' );
	const key = options.keyFn( relative_path );

	if ( !this[NS] ) throw new Error( '"i18n-webpack-plugin" loader requires the corresponding plugin' );
	else {

		// Parse the json
		const json = JSON.parse( source );

		// Save key + json
		this[NS].setPluginContent( { key, json } );

		// replace the require with the function generated by fnGenerator
		const replace = `var fn = ${ options.getTextGen( relative_path, key ) }; ` +
			`fn.locales = [ "${ reduce( json, ( memo, _, locale ) => {
				// don't include shared key ...
				if ( locale !== options.shared_text_key ) {
					// or any keys missing from array of desired locales
					if ( !Array.isArray( options.locales ) || options.locales.includes( locale ) ) {
						// to the locales array of the text function
						memo.push( locale );
					}
				}
				return memo;
			}, [] ).join( '", "' ) }" ]; ` +
 			'module.exports = fn;';

		// return the replacement string
		return replace;
	}
};

/**
 * The default way to retrieve localized text.
 * @param {any} path
 * @param {any} key
 * @returns {string}
 */
function defaultGetTextGenerator( path, key ) {
	return "function () { return window.getText(" + JSON.stringify( key ) + "); }";
}

/**
 * The default method for turning path/dir into a key
 * @param {string} path
 * @returns {string}
 */
function defaultKeyFn( path ) {
	return path;
}

module.exports = loader;
